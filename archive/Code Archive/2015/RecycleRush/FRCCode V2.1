/*
 * Changes from V2:
 *
 * -Added more controls
 * -Added temporary guarunteed reverse piston control (is VERY jittery)
 * -Added piston control
 * -Cleaned up code, removing ALL unused components.
 * -Fully commented the code
 */
package org.usfirst.frc.team3673.robot;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/*
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot 
{
    Talon motorPulley = new Talon(3); //(PWM port)
    Talon motorFLeft = new Talon(2);
    Talon motorRLeft = new Talon(1);
    Talon motorFRight = new Talon(5);
    Talon motorRRight = new Talon(4);
    RobotDrive chassis = new RobotDrive(motorFLeft, motorRLeft, motorFRight, motorRRight); //declares the motors used for the DriveTrain
    Joystick stickLeft = new Joystick(1); //declares the joystick and its port
        JoystickButton buttonPanic = new JoystickButton(stickLeft, 9); //(stick, button)
    Joystick stickRight = new Joystick(0);
        JoystickButton buttonPiston = new JoystickButton(stickRight, 1), //button one is the trigger
                       buttonPulley = new JoystickButton(stickRight, 2),
                       buttonPulleyb = new JoystickButton(stickRight, 3),
        			   button4 = new JoystickButton(stickRight, 4);
    DigitalInput limitPulleyBot = new DigitalInput(9), //(DIO port)
                 limitPulleyTop = new DigitalInput(8);
    Gyro gyro = new Gyro(1); //(Analog port)
    DoubleSolenoid dsolPiston = new DoubleSolenoid(0, 1);//(Forward channel on PCM, reverse channel on PCM)
    Encoder enc = new Encoder(0, 1, false, Encoder.EncodingType.k4X); //(DIOa, DIOb, Direction, Encoding Type)
    private int count; //see encoder
    private boolean isRobotDead = false; //kill switch
    private boolean statePulleyDown; //When true: pulley is at the bottom ogf the track
    @SuppressWarnings("unused") private boolean statePulleyUp; //When true: pulley is at the top of track
    private boolean statePulleyRequest; //See teleop
    private boolean statePulleyManual; // ^
    private boolean statePistonRequest;// ^
    private boolean stopped; //See encoder
    private boolean direction; // ^
    private boolean driveTrainMode = false; //When true: in Cartessian. When false: in polar
    private boolean statePistonExtended = false; //When true: piston is extended
    private boolean stateLastPressed; //Saves when the piston button has been pressed
	private double distance; //See encoder
	double rate; //See encoder
    
	/**
	 *  Initializes motors.
	 */
	private void initMotor()
	{
		//Both right motors will recieve only flipped values from the code (I.E. + to - and - to +)
		chassis.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
    	chassis.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
	}
	
	/**
	 * Initializes the parameters for the encoder.
	 */
    private void initEnc()
    {
        enc.setMinRate(10); //sets minimum rate before the device is considered not moving.
        enc.setDistancePerPulse(5); //sets scale factor between distance and pulses
        enc.setReverseDirection(true); //Sets direction in which the encoder counts.
        enc.setSamplesToAverage(7); //sets how many samples are taken and averaged when called. (must be between 1 and 127)
    }
    
    /**
     * Initializes the gyro
     */
    private void initGyro()
    {
    	gyro.reset(); //Resets the gyro to zero.
    	gyro.startLiveWindowMode(); //This SHOULD give live feed to the DS
    }
    
    /**
     * Initilizes solenoids
     */
    private void initSol()
    {
    	dsolPiston.set(DoubleSolenoid.Value.kOff); //dSolPiston to neutral.
    }
    
    /**
     *  Returns the values of certain parameters of the encoder to the RioLog
     */
    private void encoderRead()
    {
    	count = enc.get(); //Gets current count
    	distance = enc.getDistance(); //Gets raw count and translates into distance
    	rate = enc.getRate(); //The rate of the counter (units/sec)
    	direction = enc.getDirection(); //Returns a boolean value based on the direction the motor is going
    	stopped = enc.getStopped(); //returns whether the motor is moving or not
    	
    	System.out.println(count + "\t" + distance + "\t" + rate + "\t" + direction + "\t" + stopped);
    }
    
    /**
     * Returns the rough approximation of the gyro angle to the console.
     */
    private void gyroRead()
    {
    	System.out.println(3.6 * gyro.getAngle());
    	gyro.updateTable();
    }

    /**
     * This function is called when the robot is first started up.
     */
    public void robotInit() 
    {
    	initMotor();
    	initEnc();
    	initGyro();
    	initSol();
    }

    /**
     * This function looped during Autonomous
     */
    public void autonomousPeriodic() 
    {
    	encoderRead();
    	gyroRead();
    }        

    /**
     * This function is looped during operator control
     */
    public void teleopPeriodic() 
    {
    	chassis.setLeftRightMotorOutputs(0,0);
        chassis.setSafetyEnabled(true);
        
        /*
         * These are states and motors that need to be reset every iteration of this loop.
         */
        statePulleyRequest = false;
        statePulleyManual = false;
        motorPulley.set(0.0);

        /*
         * The following if statements take snapshot of the Joysticks immeadiatly after the loop starts.
         * Theoretically, this make the code run faster and prevents a certain level of "double pressing"
         * and skipping. 
         */
        if(buttonPanic.get())
        {
            isRobotDead =! isRobotDead;//Flips value of "isRobotDead"
        }
        
        if(button4.get())
        {
        	driveTrainMode =! driveTrainMode; //Flips value of "driveTrainMode"
        	gyro.reset(); //Resets gyro to the zero position, regardless of the previous angle.
        }
            
        if(buttonPulley.get())
        {
            statePulleyRequest = true;
        }
            
        if(limitPulleyTop.get()) //Checks to see if the limit switch is active
        {
            statePulleyDown = true; //Allows pulley to move down, and prevents it from moving up.
            statePulleyUp = false;
        }
        else if(limitPulleyBot.get()) //Checks to see if the limit switch is active
        {
            statePulleyDown = false; //vice versa
            statePulleyUp = true;
        }
            
        /*if(manualUp.get())
        {
            statePulleyRequest = false;
            statePulleyManual = true;
            statePulleyDown = false;
            statePulleyUp = true;
        }
        else if(manaulDown.get())
        {
            statePulleyRequest = false;
            statePulleyManual = true;
            statePulleyDown = true;
            statePulleyUp = false;
        }*/
            
        /*
         * Ok, the piston was a bastard to program. This will require a very long comment chain.
         * Prepare yourself.
         */
        if(buttonPiston.get())//Right, this returns whether the button was pressed.
        {
        	System.out.println("Button Pressed!"); //This is sent to the console to confirm that the button was pressed.
        	
        	/*
        	 * Note: statePistonRequest is a boolean that holds whether or not the driver asked to 
        	 * fire the piston. If it's false when it gets here, it is set to true to tell the code
        	 * that the driver would like to fire the piston
        	 */
            if(statePistonRequest == false)
            {
            	statePistonRequest = true;
            	System.out.println("sPR =  " + statePistonRequest + " (1)"); //Send this to console to confirm
            	stateLastPressed = true;
            	/*
            	 * Note: stateLastPressed is boolean that checks to see if the button was pressed previously. It is 
            	 * ONLY set to true if this part of the code is reached. While the button remains pressed, this prevents
            	 * the code from extending/retracting the piston over and over. It must be released for AT LEAST one full
            	 * loop before the piston can be changed from a state.
            	 */
            }
        }
        else //If the button IS NOT BEING PRESSED
        {
        	System.out.println("Button Released!"); //Sent to console to confirm
        	
        	/*
        	 * Note: If statePistonRequest is true when it gets here, it is set to false to tell the code
        	 * that the driver would not like to fire the piston
        	 */
            if(statePistonRequest == true)
            {
            	statePistonRequest = false;
            	System.out.println("sPR =  " + statePistonRequest + " (3)"); //Sent to console to confirm
            	stateLastPressed = false;
            }
        }
            
        /*
         * After this point, all code is internal (except for temporary controls that will be moved later)
         * This allows the roboRIO to quickly apply all changes desired or required and take another snapshot of
         * the controls.
         */
        if(isRobotDead == false) //If "panic mode" is not enabled
        {	 	
            if(driveTrainMode == false) //Checks to se if the driver wanted to change drive modes
            {
            	chassis.mecanumDrive_Polar(stickRight.getMagnitude(), stickRight.getDirectionDegrees(), stickLeft.getTwist());	
            }
            else
            {
            	chassis.mecanumDrive_Cartesian(stickRight.getX(), stickRight.getY(), stickLeft.getTwist(), 3.6 * gyro.getAngle());
            	gyroRead();
            }
            	
            if(button4.get()) //TEMPORARY REVERSE PULLEY CONTROL
            {
            	motorPulley.set(1.0);
            }
            	
            if(statePulleyRequest == true) //Checks to see if the driver wanted to move the pulley
            {
                if(statePulleyDown == true) //Checks to see if the pulley is required to move down due to limit switch
                {
                	motorPulley.set(-1.0);
                	encoderRead();
                }
                else // If not, move it up.
                {
                	motorPulley.set(1.0);
                	encoderRead();
                }
            }
                
            if(statePulleyManual == true) //Checks to se if the driver wanted to manually move the pulleys
            {
                if(statePulleyDown == true) //Checks to see if the pulley is required to move down
                {
                	motorPulley.set(1.0);
                	encoderRead();
                }
                else //If not, move it up.
                {
                	motorPulley.set(-1.0);
                	encoderRead();
                }
            }
            else
            {
                encoderRead();
            }
            
            if(stateLastPressed == true) //if stateLastPressed is true
            {
            	if(statePistonRequest == true)//AND the piston was asked to move
            	{
            		statePistonExtended =! statePistonExtended; //Flip value of "sPE"
            		System.out.println("sPE =  " + statePistonExtended);
            	}
            }
                
            if(statePistonExtended == true) //If "sPE" was flipped to true
            {
            	dsolPiston.set(DoubleSolenoid.Value.kForward); //Extend piston
            	System.out.println("'Woo!' - Austen C");
            	stateLastPressed = false; //Set stateLastPressed to false
            	/*
            	 * Note: technically, the code extends the piston everytime it doesn't retract it. But since it cannot
            	 * pump more air into the piston, nothing happens on the robot.
            	 */
            }
            else //If it is false
            {
            	dsolPiston.set(DoubleSolenoid.Value.kReverse); //retract piston
            	System.out.println("'Ahhh....' - Austen C");
            	stateLastPressed = false; //set "sLP"
            	/*
            	 * Note: technically, the code retracts the piston everytime it doesn't extend it. But due to the fact
            	 * it cannot dump air out of it, nothing happens on the robot.
            	 */
            }
        }
        else //If "isRobotDead" is true
        {
        	/*
        	 * Set all robot parts to default value, and set motors to 0
        	 */
            motorFLeft.set(0.0);
            motorRLeft.set(0.0);
            motorFRight.set(0.0);
            motorRRight.set(0.0);
            motorPulley.set(0.0);
            gyro.reset(); //ResetGyro
            dsolPiston.set(DoubleSolenoid.Value.kOff);
            /*
             * Return all states (apart from panic mode) to default value
             */
            statePulleyRequest = false;
            statePulleyManual = false;
            statePistonRequest = false;
            stateLastPressed  = false;
            stopped = false;
            driveTrainMode = false;
        }
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() 
    {
    
    }
}
