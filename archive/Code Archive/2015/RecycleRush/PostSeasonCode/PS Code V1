/*
 * This is all a carry over from the Wilsonville 2015 competition,
 * with a couple talons added for the pulley; which also has had a slight power boost.
 */

package org.usfirst.frc.team3673.robot;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * 
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot
{
    Talon motorPulley1 = new Talon(3); //(PWM port)
    Talon motorPulley2 = new Talon(8);
    Talon motorPulley3 = new Talon(6);
    Talon motorPulley4 = new Talon(7);
    Talon motorFLeft = new Talon(2);
    Talon motorRLeft = new Talon(1);
    Talon motorFRight = new Talon(5);
    Talon motorRRight = new Talon(4);
    RobotDrive chassis = new RobotDrive(motorFLeft, motorRLeft, motorFRight, motorRRight); //declares the motors used for the DriveTrain
    Joystick stickLeft = new Joystick(1); //declares the joystick and its port
        JoystickButton buttonPanic = new JoystickButton(stickLeft, 7), //(stick, button)
                       buttonDriveMode = new JoystickButton(stickLeft, 11);
    Joystick stickRight = new Joystick(0);
        JoystickButton	buttonPulleyForward = new JoystickButton(stickRight, 3),
                       	buttonPulleyReverse = new JoystickButton(stickRight, 4),
                       	buttonPulleyPower = new JoystickButton(stickRight, 1);
    DigitalInput limitPulleyBot = new DigitalInput(0), //(DIO port)
                 limitPulleyTop = new DigitalInput(1);
    GyroDeadband gyro = new GyroDeadband(1); //(Analog port)
    AnalogInput sonar = new AnalogInput(2);
    private boolean isRobotDead = false; //kill switch
    private boolean statePulleyDown; //When true: pulley is at the bottom of the track
    private boolean statePulleyUp; //When true: pulley is at the top of track
    private boolean statePulleyManualUp; //See TeleOp
    private boolean statePulleyManualDown;//^
    private boolean driveTrainMode = false; //When true: in Cartessian. When false: in polar
    private boolean statePulleyPower;
	long refTime; //Used in time measurements
	long currentTime; // ^
	long timeDiff; //    ^
    
	/**
	 *  Initializes motors.
	 */
	private void initMotor()
	{
		//Both right motors will recieve only flipped values from the code (I.E. + to - and - to +)
		chassis.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
    	chassis.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
	}
    
    /**
     * Initializes the gyro
     */
    private void initGyro()
    {
    	gyro.reset(); //Resets the gyro to zero.
    }

    /**
     * Automatically starts up the camera and sends live feed to the dashboard
     */
    private void initCam()
    {
    	CameraServer.getInstance().startAutomaticCapture("cam1");
    }
    
    /**
     *  This method determines how far the robot to go.
     *  
     *  With two totes: 24.5 in/sec + 9 inches of decel.
     *  
     * @param distance How far you want the robot to go in feet. (negative: backwards. Postive: forawrds)
     * @param speed Guesstimate of the inches per second the robot will move at.
     * @param load How many totes the3 robot is (planned) to carry
     * @return 
     */
  
    public void moveRobot(double distance, double speed, int load)
    {
    	double decel = 0; //This is for making sure the robot reaches the required distance by accounting for the distance travlled after the motors stop moving
    	double time = 0; //Dertimenes actual distance and the neccesary time to get there.
    	
    	//moveRobot(20, 0.25, 3);
    	
    	/* 
    	 * With no load:
    	 * @ 100% : 10 ft/sec
    	 * Therefore....
    	 * 99% ~ 9.9 ft/sec
    	 * 50% ~ 5 ft/sec etc.
    	 * But dont go below 25%
    	 * 
    	 * With two totes:
    	 * @ 50% : 24.5 in/sec + 9 inches of decel.
    	 */
    	
    	if(speed >= 1.0)
    	{
    		speed = 1.0; //Sets the speed to 100% if the programmer (or Austin Calder) sets it to above 100%
    	}
    	else if(speed <= 0.25)
    	{
    		speed = 0.25; //Sets the speed to 25% if the programmer (or Austin Calder) sets it to less than 25%
    	}
    	
    	if(load <= 0) //With no load
    	{
    		decel = 0.167; //2 inches of decel
    		time = Math.abs(distance - decel) / Math.abs(speed * 10);
    	}
    	else if(load == 1)
    	{
    		decel = 0.5; //(6 inches of decel) This number is arbitrary, more testing with 1 tote required
    		time = Math.abs(distance - decel) / Math.abs(speed * 8);
    	}
    	else if(load == 2)
    	{
    		decel = 0.75; //9 inches of decel
    		time = Math.abs(distance - decel) / Math.abs(speed * 4.08);
    	}
    	else if(load >= 3)
    	{
    		decel = 1; //(12 inches of decel) This number is arbitrary, more testing with both tests and the bin required.
    	}
    	
    	if(distance < 0)
    	{
    		chassis.mecanumDrive_Polar(-speed, 0.0, 0.0); //If the distance is kess than zero, go backwards at "speed"
        	Timer.delay(time);
    	}
    	else
    	{
    		chassis.mecanumDrive_Polar(speed, 0.0, 0.0); //Go forward at "speed"
        	Timer.delay(time);
    	}
    	
    	chassis.mecanumDrive_Polar(0.0, 0.0, 0.0); //Make sure the motors are not moving when the function ends.
    }
    
    /**
     *  Tells the robt to turn right.
     *  
     * @param rotation The degrees you want the robot to turn.
     */
    public void turnRobot(double rotation, double motorSpeed)
    {	
    	System.out.println("Hit tRR"); //Debug line
    	double time;
    	
    	if(rotation <= -180)
    	{
    		rotation = -180;
    	}
    	else if(rotation >= 180)
    	{
    		rotation = 180;
    	}
    	
    	if(rotation < 0)
    	{
    		motorSpeed = -motorSpeed;
    	}
    	
    	if(motorSpeed == 0.5)
    	{
    		time = (Math.abs(rotation) / 90) * 1.25 ;
    	}
    	else
    	{
    		time = (Math.abs(rotation) / 90) * 1.9;
    	}
    	 
    	 chassis.mecanumDrive_Polar(0.0, 0.0, motorSpeed);
    	 Timer.delay(time);
    	 System.out.println("turnRobot" + motorSpeed + "\t" + time);
    	 chassis.mecanumDrive_Polar(0.0, 0.0, 0.0);
    }

    /**
     * How much you want the pulley to go. Respects Limit switches!
     * @param distance How many inches up or down you want it to go
     * @param load The number of totes on the load
     * @param toMaxDown If you want it to go all the way down (Priority)
     * @param toMaxTop If you want it to go all the way up (Secondary Priority)
     */
    private void setPulley(double power, double time)
    {
    	motorPulley1.set(power);
    	motorPulley2.set(power);
    	motorPulley3.set(-power);
    	motorPulley4.set(-power);
    	Timer.delay(time);
    }
    
    public void moveRobotMech(double distance)
    {
    	double speed = 0.5;
    	double time = Math.abs(distance) / (speed * 10);
    	
    	if(distance > 0)
    	{
    		chassis.mecanumDrive_Polar(speed, 90, 0.0);
    		Timer.delay(time);
    	}
    	else
    	{
    		chassis.mecanumDrive_Polar(speed, -90, 0.0);
    		Timer.delay(time);
    	}
    }
    
    /**
     * Moves Robot to autozone
     */
    private void moveSelfToAutozone()
    {
    	setPulley(0.75, 1.00);
    	moveRobot(-8, 0.5, 1);
    	turnRobot(90, 0.5);
    }

    /**
     * This function is called when the robot is first started up.
     */
    public void robotInit() 
    {
    	initMotor();
    	initGyro();
    	//initCam();
    }

    /**
     * Runs once during autonomous. It is wise to use this for autnomous code.
     */
    public void autonomousInit() 
    {
    	//autoMode = (int)blerg.getSelected();
    	gyro.reset();
    	gyro.setSensitivity(0.007 / 3.6);
    	gyro.setDeadband(0.01);
    	gyro.reset();
    	refTime = System.currentTimeMillis();
    	chassis.setSafetyEnabled(false);
    	
    	moveSelfToAutozone();
    	System.out.println("Total Run Time" + (System.currentTimeMillis() - refTime) / 1000);
    }        
   
    /**
     * Run once during teleop, before teleopPeriodic()
     */
    public void teleopInit()
    {
    	chassis.setLeftRightMotorOutputs(0,0); // ? but it is important!
        chassis.setSafetyEnabled(true); //? But it is important!
    }
    
    /**
     * This function is looped during operator control (~20 mS/loop)
     */
    public void teleopPeriodic() 
    {
        /*
         * These are states and motors that need to be reset every iteration of this loop.
         */
        statePulleyManualUp = false;
        statePulleyManualDown = false;
        statePulleyDown = false;
        statePulleyUp = false;
        motorPulley1.set(0.0);
        motorPulley2.set(0.0);
        motorPulley3.set(0.0);
        motorPulley4.set(0.0);
        
        /*
         * The following if statements take snapshot of the Joysticks immeadiatly after the loop starts.
         * Theoretically, this make the code run faster and prevents a certain level of "double pressing"
         * and skipping. 
         */
        if(buttonPanic.get())
        {
            isRobotDead =! isRobotDead;//Flips value of "isRobotDead"
        }
        
        if(buttonDriveMode.get())
        {
        	driveTrainMode =! driveTrainMode; //Flips value of "driveTrainMode"
        	gyro.reset(); //Resets gyro to the zero position, regardless of the previous angle.
        }
          
        //If POV 0 is at Forward (0), Left Forward (315), or right forward (45) position
        if(stickRight.getPOV(0) == 0 || stickRight.getPOV(0) == 315 || stickRight.getPOV(0) == 45)
        {
            statePulleyDown = false; //Set conflicting values to false
            statePulleyManualDown = false;
            statePulleyManualUp = true; //set agreeing values to true
            statePulleyUp = true;
        }
        //If POV 0 is at Back (180), Left Back (225), or Right Back (135) position
        else if(stickRight.getPOV(0) == 180 || stickRight.getPOV(0) == 135 || stickRight.getPOV(0) == 225)
        {
            statePulleyUp = false; //Set conflicting values to false
            statePulleyManualUp = false;
            statePulleyManualDown = true; //set agreeing values to true
            statePulleyDown = true;
        }
        
        if(statePulleyUp == true && buttonPulleyPower.get())
        {
        	statePulleyPower = true;
        	System.out.println(buttonPulleyPower.get() + "\t" +  statePulleyUp + "\t" + statePulleyPower);
        }
        
        if(limitPulleyTop.get()) //Checks to see if the limit switch is active
        {
        	
            statePulleyDown = true; //Allows pulley to move down, and prevents it from moving up.
            statePulleyUp = false;
            currentTime = System.currentTimeMillis();
            timeDiff = currentTime - refTime;
        }
        
        if(limitPulleyBot.get()) //Checks to see if the limit switch is active
        {
            statePulleyDown = false; //vice versa
            statePulleyUp = true;
            refTime = System.currentTimeMillis();
            //System.out.println("BOT IS PRESSED");
        }
        
        
            
        /*
         * After this point, all code is internal (except for temporary controls that will be moved later)
         * This allows the roboRIO to quickly apply all changes desired or required and take another snapshot of
         * the controls.
         */
        if(isRobotDead == false) //If "panic mode" is not enabled
        {	 	
        	SmartDashboard.putBoolean("Panic Mode Activated?", isRobotDead);
        	
            if(driveTrainMode == false) //Checks to se if the driver wanted to change drive modes
            {
            	chassis.mecanumDrive_Polar(stickRight.getMagnitude(), stickRight.getDirectionDegrees(), stickLeft.getTwist());
            }
            else
            {
            	//gyroRead();
            	chassis.mecanumDrive_Cartesian(0.0, 0.0 , 0.0 , 0);
            }
            
            SmartDashboard.putBoolean("Cartesian Drive Activated?", driveTrainMode);
                
            if(statePulleyManualUp == true) //Checks to se if the driver wanted to manually move the pulleys up
            {
                if(statePulleyDown == true) //Checks to see if the pulley is required to not move
                {
                	motorPulley1.set(0.0);
                	motorPulley2.set(0.0);
                	motorPulley3.set(0.0);
                	motorPulley4.set(0.0);
                }
                else //If not, move it up.
                {
                	if(statePulleyPower == true)
                	{
                		motorPulley1.set(1);
                		motorPulley2.set(1);
                		motorPulley3.set(-1);
                    	motorPulley4.set(-1);
                	}
                	else
                	{
                		motorPulley1.set(1);
                		motorPulley2.set(1);
                		motorPulley3.set(-1);
                    	motorPulley4.set(-1);
                	}
                }
            }
            
            if(statePulleyManualDown == true)//Checks to see if the driver wanted to move the pulleys down
            {
            	if(statePulleyUp == true)//Checks to see of the pulleys are required to move up due to a limit switch
            	{
            		motorPulley1.set(0.0);
            		motorPulley2.set(0.0);
            		motorPulley3.set(0.0);
                	motorPulley4.set(0.0);
            	}
            	else //If not, move them down.
            	{
            		motorPulley1.set(-1);
            		motorPulley2.set(-1);
            		motorPulley3.set(1);
                	motorPulley4.set(1);
            	}
            }
        }
        else //If "isRobotDead" is true
        {
        	SmartDashboard.putBoolean("Panic Mode Activated?", isRobotDead);
        	//Set all hardware to default, and motors to 0 speed
            motorFLeft.set(0.0);
            motorRLeft.set(0.0);
            motorFRight.set(0.0);
            motorRRight.set(0.0);
            motorPulley1.set(0.0);
            motorPulley2.set(0.0);
            motorPulley3.set(0.0);
        	motorPulley4.set(0.0);
            gyro.reset();
            //Return all states (apart from panic mode) to default value
            statePulleyManualUp = false;
            statePulleyManualDown = false;
            driveTrainMode = false;
        }
    }
}
