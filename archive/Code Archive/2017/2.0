package org.usfirst.frc.team3673.robot;

import org.opencv.core.Rect;
import org.opencv.imgproc.Imgproc;

import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.vision.*;


public class Robot extends IterativeRobot {
	
		private static final int IMG_WIDTH = 320;
		private static final int IMG_HEIGHT = 240;
	
		public VisionThread tedThreaderson;
		private double centerX = 0.0;
		private final Object imgLock = new Object();
	
		NetworkTable table;

	
	
		public Robot() {
		
			table = NetworkTable.getTable("GRIP/filterContoursOutput");
		}
		
		edu.wpi.cscore.AxisCamera ACam;
		String ipaddr = InetAddress("10.36.73.47");
		
		Processing profile = new Processing(); 


		AnalogInput ai = new AnalogInput(3);
	
		CANTalon leftFront = new CANTalon(3);
		CANTalon leftBack = new CANTalon(4);
		CANTalon rightFront = new CANTalon(7);
		CANTalon rightBack = new CANTalon(2);
		CANTalon holyRoller = new CANTalon(5);
		//to be changed later
		
		RobotDrive drive = new RobotDrive(leftFront, leftBack, rightFront, rightBack);
		
		
		CANTalon fly = new CANTalon(6);
		
		
		Joystick right = new Joystick(1);
		Joystick left = new Joystick(0);
		
		JoystickButton fireTrigger = new JoystickButton(right, 1);
		JoystickButton fuelLoad = new JoystickButton(left, 1);
		
		
		Servo servoX = new Servo(0);
		Servo servoY = new Servo(1);
		
	
		public void initCam() {
		ACam = CameraServer.getInstance().addAxisCamera("ACam", "10.36.73.47");
	}
	
	    private String InetAddress(String string) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
	public void robotInit() {
			ACam = CameraServer.getInstance().addAxisCamera("ACam", "10.36.73.47");
			ACam.setResolution(IMG_WIDTH, IMG_HEIGHT);
			
		tedThreaderson = new VisionThread(ACam, new Processing(), profile -> {
	        if (!profile.filterContoursOutput().isEmpty()) {
	            Rect r = Imgproc.boundingRect(profile.filterContoursOutput().get(0));
	            synchronized (imgLock) {
	                centerX = r.x + (r.width / 2);
	            }
	        }
	    });
		
		tedThreaderson.start();
		
		
		drive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
    	drive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
    	drive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
    	drive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
    	
	    	}

	
	@Override
	public void autonomousInit() {
		 drive.setSafetyEnabled(false);
		}

	@Override
	public void autonomousPeriodic() {
		double centerX;
		synchronized (imgLock) {
			centerX = this.centerX;
		}
		double turn = centerX - (IMG_WIDTH / 2);
		}

	@Override
	public void teleopInit() {
		
		}


	@Override
	public void teleopPeriodic() {
		drive.tankDrive(left, right);
		System.out.print(left.getY());
		System.out.print("\t");
		System.out.println(right.getY());
		System.out.println(ai.getAverageValue());
		
		
	
		double [] defaultValue = new double [0];
		double[] areas = NetworkTable.getTable("GRIP/filterContoursOutput").getNumberArray("area", defaultValue);
		System.out.print("area: " + areas);
		for (double area : areas) {
			System.out.print(area + " ");
			}
		System.out.println();
		
		if (fuelLoad.get()){
			holyRoller.set(-0.5);
			}
		else {
			holyRoller.set(0.0);
			}
	
		//fire trigger
		if (fireTrigger.get()){
		
	   		
    		fly.set(0.8);
			}
		else {
			
			fly.set(0.0);
			
			
		}
		}
		}
